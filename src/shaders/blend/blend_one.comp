#version 450
#extension GL_GOOGLE_include_directive: require

#ifndef MODE_FUNC
#error "must define a mode!"
#endif

#include "modes.glsl"

// Expected defines:
//  MODE_FUNC to be the name of an imported blend mode
// +The appropriate define from modes.glsl to actually build that func lol

// Different sets since only inputImage will change per call
layout(set = 0, binding = 0, RGBA16F) uniform restrict readonly image2D inputImage;
layout(set = 1, binding = 0, RGBA16F) uniform restrict /*readwrite*/ image2D backgroundImage;
// Specialize at runtime to however much concurrancy we can get!
// For multisample we could use z for each sample, for now we set to 1
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

vec4 unmultiply(vec4 color) {
    return color.a == 0.0 ? vec4(0.0) : vec4(color.rgb / color.a, color.a);
}
void main() {
    // If out-of-bounds of either image, return early.
    if (
        any(
            greaterThanEqual(
                uvec2(gl_GlobalInvocationID.xy),
                uvec2(min(imageSize(inputImage).xy, imageSize(backgroundImage).xy))
            )
        )
    ) return;

    ivec2 coordinate = ivec2(gl_GlobalInvocationID.xy);
    // Blend unmultiplied input onto unmultiplied background
    vec4 result = MODE_FUNC(
        unmultiply(imageLoad(inputImage, coordinate)),
        unmultiply(imageLoad(backgroundImage, coordinate))
    );
    // Store result into background as premultipled
    imageStore(backgroundImage, coordinate, vec4(result.rgb, 1.0) * result.a);
}